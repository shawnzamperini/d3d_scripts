import pretty_plots as pp
import numpy as np
import pandas as pd
from ThomsonClass import ThomsonClass
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit


def itf_otf_plot():
    lambda_ne = np.array([4.605, 4.544, 3.410, 5.623, 3.058, 2.164, 1.722, 2.612,
                          2.401, 2.027, 1.453])
    lambda_ne_err = np.array([0.4552, 0.5542, 0.7938, 1.2043, 0.4252, 0.3956,
                              0.2197, 0.7343, 0.4476, 0.2407, 0.251])
    itf_otf = np.array([3.323809525, 2.302325577, 1.733333322, 2.91666666,
                        0.749999985, 1.850000003, 0.86734694, 0.800000011,
                        0.727272725, 1.375000004, 0.345238096])
    itf_otf_err = np.array([0.393703608, 0.462717516, 0.445963232, 0.6249957,
                            0.406947537, 0.589904423, 0.138455898, 0.372362303,
                            0.222509805, 0.420682602, 0.083429511])

    fig = pp.pplot(x=lambda_ne, xerr=lambda_ne_err, y=itf_otf, yerr=itf_otf_err, ms=11,
                   xlabel='Plasma Density Falloff, '+r'$\bf{\lambda}$'+' (cm)', ylabel='ITF/OTF Max W Content',
                   weight='bold')

def twod_avg_plots():
    filename = '/mnt/c/Users/Shawn/Google Drive/School/Tennessee/Research/My Slides and Sheets/2018-10/avg_lams_profs.xlsx'
    df = pd.read_excel(filename, sheet_name=3)

    avgc_x = np.array([0, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5])
    avgc_y = np.array([0.823235462, 0.521010541, 0.474225485, 0.49210778,
                       0.466843473, 0.459609305, 0.472382558, 0.500823746,
                       0.581662354, 0.613154856, 0.831188867])

    avgb_x = np.array([0, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5,
                       2.75, 3, 3.25, 3.5, 3.75, 4, 4.25, 4.5, 4.75, 5])
    avgb_y = np.array([0.838255109, 0.680718111, 0.653292943, 0.633479284,
                       0.615370476, 0.600568093, 0.587378014, 0.595564799,
                       0.583085049, 0.572468541, 0.534090827, 0.546292564,
                       0.553421959, 0.558379920, 0.561794678, 0.596267804,
                       0.562282442, 0.564942857, 0.578859443, 0.593684058,
                       0.742640932])

    test68_x = np.array([0.2499999, 0.75, 1.25, 2.5, 3.75, 4.25, 4.7500001])
    test68_y = np.array([1, 0.972940722, 0.895841523, 0.840417983, 0.902008185,
                         0.965122997, 0.993934531])


    figb = None
    figc = None
    for col in df.columns:
        if col[0] == 'b' and col[-1] == 'x':
            pname = col[:3]
            x = df[pname+'_x'].values
            y = df[pname+'_y'].values
            figb = pp.pplot(x, y, fmt='k-', show_fig=False,
                            fig=figb, lw=3, alpha=0.25)

        elif col[0] == 'c' and col[-1] == 'x':
            pname = col[:3]
            x = df[pname+'_x'].values
            y = df[pname+'_y'].values
            figc = pp.pplot(x, y, fmt='k-', show_fig=False,
                            fig=figc, lw=3, alpha=0.25)



    #figb = pp.pplot(test68_x, test68_y, label='3DLIM Simulation', fig=figb, fmt='-', color=8)
    figb = pp.pplot(avgb_x, avgb_y, '-', label='Average', fig=figb, xlabel='Z Position (mm)',
                    ylabel='Normalized W Counts', weight='bold')
    figb.axes[0].legend(loc='lower left', fontsize=26)
    figb.tight_layout()
    figb.show()

    figc = pp.pplot(avgc_x, avgc_y, '-', label='Average', fig=figc, xlabel='Z Position (mm)',
                    ylabel='Normalized W Counts', weight='bold')
    figc.axes[0].legend(loc='lower left', fontsize=26)
    figc.tight_layout()
    figc.show()

def ts_fit_plot():
    x_ts = [3.8587386 , 3.31175473, 2.75240956, 2.03382474, 1.45667159,
            0.85012543, 0.36780472, 0.08803858]
    x_ts_err = [0.09095085, 0.09589944, 0.10127416, 0.10781816, 0.11316682,
                0.11888685, 0.12346344, 0.12599348]
    y_ne = [27.1866939 ,  27.68029456,  35.75120572,  54.92265502,
            53.98874909,  70.15706654,  95.53070494, 134.20679542]
    y_ne_err = [18.89704616, 17.63639244, 42.57332783, 28.92728567, 35.68570325,
                19.92446519, 20.73598807, 31.75976641]
    x_fit = [ 0.        ,  0.14141414,  0.28282828,  0.42424242,  0.56565657,
        0.70707071,  0.84848485,  0.98989899,  1.13131313,  1.27272727,
        1.41414141,  1.55555556,  1.6969697 ,  1.83838384,  1.97979798,
        2.12121212,  2.26262626,  2.4040404 ,  2.54545455,  2.68686869,
        2.82828283,  2.96969697,  3.11111111,  3.25252525,  3.39393939,
        3.53535354,  3.67676768,  3.81818182,  3.95959596,  4.1010101 ,
        4.24242424,  4.38383838,  4.52525253,  4.66666667,  4.80808081,
        4.94949495,  5.09090909,  5.23232323,  5.37373737,  5.51515152,
        5.65656566,  5.7979798 ,  5.93939394,  6.08080808,  6.22222222,
        6.36363636,  6.50505051,  6.64646465,  6.78787879,  6.92929293,
        7.07070707,  7.21212121,  7.35353535,  7.49494949,  7.63636364,
        7.77777778,  7.91919192,  8.06060606,  8.2020202 ,  8.34343434,
        8.48484848,  8.62626263,  8.76767677,  8.90909091,  9.05050505,
        9.19191919,  9.33333333,  9.47474747,  9.61616162,  9.75757576,
        9.8989899 , 10.04040404, 10.18181818, 10.32323232, 10.46464646,
       10.60606061, 10.74747475, 10.88888889, 11.03030303, 11.17171717,
       11.31313131, 11.45454545, 11.5959596 , 11.73737374, 11.87878788,
       12.02020202, 12.16161616, 12.3030303 , 12.44444444, 12.58585859,
       12.72727273, 12.86868687, 13.01010101, 13.15151515, 13.29292929,
       13.43434343, 13.57575758, 13.71717172, 13.85858586, 14.        ]
    y_fit_ne = [124.49050405, 116.31497776, 108.6763537 , 101.5393725 ,
        94.87109032,  88.64072682,  82.81952304,  77.38060869,
        72.29887812,  67.55087438,  63.114681  ,  58.96982081,
        55.09716142,  51.47882687,  48.09811518,  44.9394212 ,
        41.98816462,  39.23072262,  36.65436705,  34.2472056 ,
        31.99812699,  29.89674962,  27.93337366,  26.09893631,
        24.38496992,  22.78356293,  21.28732337,  19.88934467,
        18.58317388,  17.36278179,  16.22253515,  15.15717066,
        14.16177066,  13.23174046,  12.3627871 ,  11.55089954,
        10.79233018,  10.08357749,   9.42136993,   8.80265079,
         8.2245641 ,   7.68444146,   7.17978969,   6.70827936,
         6.26773399,   5.85612008,   5.47153762,   5.11221142,
         4.77648285,   4.46280221,   4.16972157,   3.89588809,
         3.64003776,   3.40098962,   3.17764021,   2.96895858,
         2.77398147,   2.59180887,   2.42159989,   2.26256886,
         2.11398169,   1.97515253,   1.84544053,   1.72424697,
         1.61101242,   1.5052142 ,   1.40636394,   1.31400537,
         1.22771215,   1.14708598,   1.07175468,   1.00137053,
         0.93560864,   0.87416545,   0.81675736,   0.76311936,
         0.71300387,   0.66617956,   0.62243029,   0.58155412,
         0.54336237,   0.50767873,   0.47433851,   0.44318781,
         0.41408283,   0.38688923,   0.36148148,   0.33774231,
         0.31556214,   0.29483858,   0.27547597,   0.25738494,
         0.24048199,   0.22468908,   0.20993333,   0.19614661,
         0.18326529,   0.17122991,   0.15998492,   0.14947841]

    fig = pp.pplot(x=x_fit, y=y_fit_ne, fmt='--')
    #fig = pp.pplot(x=x_ts, y=y_ne, xerr=x_ts_err, yerr=y_ne_err, ms=11,
    #               xlabel=r'$\mathrm{\bf{R-R_{sep}\ OMP\ (cm)}}$', ylabel=r'$\mathrm{\bf{n_e\ 10^{18} m^{-3}}}$',
    #               weight='bold', xrange=[0,5], fig=fig)
    fig = pp.pplot(x=x_ts, y=y_ne, xerr=x_ts_err, yerr=y_ne_err, ms=11,
                   xlabel='R-Rsep OMP (cm)', ylabel='ne 10^18 m^-3',
                   xrange=[0,5], fig=fig)

def bar_graph_plot():
    names = ['A2', 'A17', 'A18', 'A19', 'A28', 'A33', 'A34', 'A35']
    itf   = [0.786782061, 1.429388222, 1.734605377, 1.104362231, 1.467997651,
             0.621890547, 0.626174076, 0.589622642]
    otf   = [1.264702163, 4.198152813, 3.235198965, 3.225806452, 2.424830262,
             3.299241175, 4.651162791, 3.039513678]

    ind = np.arange(len(names))
    width = 0.35
    plt.rcParams['font.family'] = 'serif'
    fig = plt.figure(figsize=(10, 7.5))
    ax1 = fig.add_subplot(111)
    itfbar = ax1.bar(ind, itf, width=width, color=(214/256, 39/256, 40/256), label='ITF')
    otfbar = ax1.bar(ind+width, otf, width=width, color=(148/256, 103/256, 189/256), label='OTF')
    ax1.set_xticks(ind + width / 2)
    ax1.set_xticklabels(names, fontsize=26, weight='bold')
    ax1.set_ylabel('W Density Falloff, '+r'$\bf{\lambda}$'+' (cm)', fontsize=26, weight='bold')
    #ax1.set_yticks(fontsize=26)
    ax1.tick_params(labelsize=26)
    ax1.legend(prop=dict(weight='bold', size=26))
    fig.tight_layout()
    fig.show()

def fit_to_a2_plot():
    x_ad2 = [16.6176700717298, 16.0546268935315, 15.489424967989,
       14.922134388831, 14.3528229816568, 13.7815536605372,
       13.208383271541, 12.6333641110981, 12.0565459810481,
       11.5068039253915, 11.0059771062074, 10.5038574598776,
       10.0003373116366, 9.49544691761031, 8.98921378189489,
       8.48166363650842, 7.97282159133495, 7.46271200080144,
       6.95135655857758]
    x_au2 = [17.1326516274818, 16.5672185839497, 16.0082092852649,
       15.4395753923518, 14.8751950566489, 14.305130189024,
       13.7340116697507, 13.1585656359107, 12.5835098255648,
       12.0106154275159, 11.4646137122734, 10.9618977876909,
       10.4614136349688, 9.95909661737767, 9.45399627203076,
       8.94704328260569, 8.44040296174586, 7.93009386846082,
       7.4206914510482]
    y_ad2 = [0.        , 0.        , 0.00136377, 0.00136377, 0.0040913 ,
       0.        , 0.00272753, 0.0040913 , 0.00272753, 0.02591156,
       0.00681883, 0.0245478 , 0.08728106, 0.16365199, 0.26593448,
       0.33685034, 0.37776333, 0.40912997, 0.47595453]
    y_ad2_err = [0.001     , 0.001     , 0.00236377, 0.00236377, 0.00336211,
       0.001     , 0.00292866, 0.00336211, 0.00292866, 0.00694452,
       0.00404947, 0.00678597, 0.01191013, 0.01593931, 0.02004396,
       0.02243327, 0.0236976 , 0.02462113, 0.02647726]
    y_au2 = [0.        , 0.00136377, 0.00272753, 0.00681883, 0.        ,
       0.0040913 , 0.0040913 , 0.00272753, 0.0081826 , 0.0081826 ,
       0.01363767, 0.03545793, 0.040913  , 0.07500716, 0.08591729,
       0.11455639, 0.14319549, 0.13501289, 0.01772897]
    y_au2_err = [0.001     , 0.00236377, 0.00292866, 0.00404947, 0.001     ,
       0.00336211, 0.00336211, 0.00292866, 0.00434053, 0.00434053,
       0.00531261, 0.00795387, 0.00846966, 0.01111396, 0.01182456,
       0.01349913, 0.01497445, 0.01456931, 0.00591713]

    ad2_a = 1.46E+04
    ad2_b = -1.271
    au2_a = 114.2
    au2_b = -0.7907
    fit_x = np.linspace(17.5, 7.5, 100)
    ad2_fit_y = ad2_a * np.exp(ad2_b * fit_x)
    au2_fit_y = au2_a * np.exp(au2_b * fit_x)

    fig = pp.pplot(x_ad2, y_ad2, yerr=y_ad2_err, fmt='.', ms=15, label='ITF')
    fig = pp.pplot(x_au2, y_au2, yerr=y_au2_err, fmt='.', color=8, ms=15, label='OTF', fig=fig)
    fig = pp.pplot(fit_x, ad2_fit_y, fmt='--', fig=fig)
    fig = pp.pplot(fit_x, au2_fit_y, fmt='--', fig=fig, color=8, yrange=[0, 0.6], xrange=[6, 16])

def lmode_probe_plot():
    filename = '/mnt/c/Users/Shawn/Google Drive/July Backup/d3dscripts/Data/LModeProbes.xlsx'
    df       = pd.read_excel(filename, sheet_name='A2', usecols=range(0,14)).dropna()

    xd     = df['rminrsep_D']
    xd_err = df['rminrsep_err_D']
    yd     = df['w_areal_D']
    yd_err = df['w_areal_err_D']
    xu     = df['rminrsep_U']
    xu_err = df['rminrsep_err_U']
    yu     = df['w_areal_U']
    yu_err = df['w_areal_err_U']

    def exp_fit(x, a, b):
        return a * np.exp(-x*b)

    poptd, pcovd = curve_fit(exp_fit, xd[:-3], yd[:-3])
    x_fitd = np.linspace(7, 15, 100)
    y_fitd = exp_fit(x_fitd, *poptd)
    poptu, pcovu = curve_fit(exp_fit, xu[:-3], yu[:-3])
    x_fitu = np.linspace(7, 15, 100)
    y_fitu = exp_fit(x_fitu, *poptu)


    fig = pp.pplot(x_fitd, y_fitd, fmt='--', lw=3)
    fig = pp.pplot(x_fitu, y_fitu, fmt='--', color=8, lw=3, fig=fig)
    fig = pp.pplot(xd, yd, yerr=yd_err, ms=12, label='ITF', fig=fig)
    fig = pp.pplot(xu, yu, yerr=yu_err, ms=12, color=8, label='OTF', fig=fig,
                   yrange=[0, 0.6], xlabel=r'$\mathrm{\bf{R-R_{sep}\ (cm)}}$',
                   ylabel=r'$\mathrm{\bf{W\ Areal\ Density\ (10^{18}\ cm^{-2})}}$')


#itf_otf_plot()
#twod_avg_plots()
ts_fit_plot()
#bar_graph_plot()
#fit_to_a2_plot()
#lmode_probe_plot()
